/*
문제 설명
빨강, 파랑, 초록색의 마법의 구슬이 있습니다. 마법의 구슬은 같은 색의 구슬 2개를 사용하여 다른 색 구슬 1개로 바꿀 수 있습니다. 즉, 빨간색 구슬 2개를 사용하여 파란색 또는 초록색 구슬 1개로 바꿀 수 있습니다. 이 과정을 합성이라고 합니다. 현재 빨강, 파랑, 초록색 구슬을 각각 a,b,c 개 가지고 있습니다. 현재 가지고 있는 구슬을 합성하여 빨강, 파랑, 초록색 구슬을 각각 d,e,f 개 이상 가지고 싶습니다. 그것이 가능한지 불가능한지 판별하여 return 하도록 solution 함수를 완성해 주세요. (a, b, c, d, e, f는 매개변수로 주어집니다.)

만약 빨강, 파랑, 초록색 구슬을 각각 4,4,0 개를 가지고 있고, 합성을 통해 최소 2,1,2개 이상을 가져야 한다면 그 과정은 다음과 같습니다.

빨강색 구슬 2개를 파랑색 구슬 1개로 합성합니다. (2,5,0)
파랑색 구슬 4개를 초록색 구슬 2개로 합성합니다. (2,1,2)
조건을 만족하였으므로 합성을 종료한 후, true를 return 합니다.

제한사항
a,b,c,d,e,f : 1,000,000 보다 작거나 같은 자연수
입출력 예
a	b	c	d	e	f	result
4	4	0	2	1	2	true
3	3	3	2	2	2	true
2	2	1	1	1	2	false
입출력 예 설명
입출력 예 # 1
문제의 예시와 같습니다.

입출력 예 # 2
이미 조건을 만족하고 있으므로 합성을 할 필요 없이 true를 return 합니다.

입출력 예 # 3
어떠한 방법으로도 조건을 만족할 수 없으므로 false를 return 합니다.

*/

// 풀이
class Solution 
{
    public int solution(int a, int b, int c, int d, int e, int f)
    {
        boolean answer = false;
        int first, second, third;
    
        // 효율성을 높이기 위해 각각의 first, second, third 세 가지 경우를 나누어 가진 개수 - 원하는 개수를 구해놓는다. 세 경우 모두 0 이상이 나오게 되면 통과한다.
        first = a-d;
        second = b-e;
        third = c-f;
    
        // 두 개의 구슬은 한 개의 다른 구슬로 변환 가능하다. 즉 0을 넘어가는 경우 각각의 구슬들은 2배수마다 의미있는 숫자로 존재한다.
        if(first>0)
            first /= 2;

        if(second>0)
            second /= 2;

        if(third>0)
            third /= 2;

        // 이렇게 의미있는 숫자로 존재하는 first, second, third의 구슬이 합쳐졌을 때 0이상이 되면 구슬을 변화시키거나, 그대로 존재하거나 모든 경우에 원하는 답을 만족한다.
        if(first+second+third>=0)
            answer = true;
    
    return answer;

    }
}
