/*
나무 자르기 성공출처다국어분류
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초	256 MB	69954	20228	12606	25.966%
문제
상근이는 나무 M미터가 필요하다. 근처에 나무를 구입할 곳이 모두 망해버렸기 때문에, 정부에 벌목 허가를 요청했다. 정부는 상근이네 집 근처의 나무 한 줄에 대한 벌목 허가를 내주었고, 상근이는 새로 구입한 목재절단기를 이용해서 나무를 구할것이다.

목재절단기는 다음과 같이 동작한다. 먼저, 상근이는 절단기에 높이 H를 지정해야 한다. 높이를 지정하면 톱날이 땅으로부터 H미터 위로 올라간다. 그 다음, 한 줄에 연속해있는 나무를 모두 절단해버린다. 따라서, 높이가 H보다 큰 나무는 H 위의 부분이 잘릴 것이고, 낮은 나무는 잘리지 않을 것이다. 예를 들어, 한 줄에 연속해있는 나무의 높이가 20, 15, 10, 17이라고 하자. 상근이가 높이를 15로 지정했다면, 나무를 자른 뒤의 높이는 15, 15, 10, 15가 될 것이고, 상근이는 길이가 5인 나무와 2인 나무를 들고 집에 갈 것이다. (총 7미터를 집에 들고 간다) 절단기에 설정할 수 있는 높이는 양의 정수 또는 0이다.

상근이는 환경에 매우 관심이 많기 때문에, 나무를 필요한 만큼만 집으로 가져가려고 한다. 이때, 적어도 M미터의 나무를 집에 가져가기 위해서 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 나무의 수 N과 상근이가 집으로 가져가려고 하는 나무의 길이 M이 주어진다. (1 ≤ N ≤ 1,000,000, 1 ≤ M ≤ 2,000,000,000)

둘째 줄에는 나무의 높이가 주어진다. 나무의 높이의 합은 항상 M보다 크거나 같기 때문에, 상근이는 집에 필요한 나무를 항상 가져갈 수 있다. 높이는 1,000,000,000보다 작거나 같은 양의 정수 또는 0이다.

출력
적어도 M미터의 나무를 집에 가져가기 위해서 절단기에 설정할 수 있는 높이의 최댓값을 출력한다.

예제 입력 1 
4 7
20 15 10 17
예제 출력 1 
15
*/

// 풀이
import java.util.*;

public class Main {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int trees[] = new int[N];
        
        for(int i=0; i<N; i++){
            trees[i] = sc.nextInt();
        }
        Arrays.sort(trees);
        // min은 처음에 0이어야 한다. 
        int min = 0;
        // 최대 길이
        int max = trees[N-1];
        int mid = 0;
       
        while(max >= min){
            long sum = 0;   // 최대 길이 sum은 long이다. 왜냐면 이분탐색이면 경우에 따라 엄청 크게 나올 수 있기 때문.
            mid = (min + max) / 2;    // 나무 자르기
            
            for(int i : trees){   // 나무들 확인해서
                int remain = i - mid;   // 자르고 남은 나무가
                if( remain>0 ) sum += remain; // 있으면 더해준다. 음수면 더하면 안됨.
            }
            
            // mid로 구하면 틀릴 수 있어서 max값으로 답을 구할 예정이다. 그런 경우 M을 기준으로 sum이 더 크면 최소값을, 작으면 최대값을 변화시켜가며 움직인다.
            // 그러다가 최소값이 최대값과 같아지는 경우 딱 sum과 M이 같다. 이 경우가 가장 정확한 나무길이이다.
            // 최소값이 최대값보다 큰 경우는 sum이 M을 구하는 최소값인 경우이다. max를 기준으로 구할 예정이므로 sum>=M을 잡아준다.
            if( sum >= M ) min = mid+1;   
            else if( sum < M ) max = mid-1;
        }
      System.out.println(max);
    }
}
