/*
랜선 자르기 성공분류
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	128 MB	72372	16093	10450	20.359%
문제
집에서 시간을 보내던 오영식은 박성원의 부름을 받고 급히 달려왔다. 박성원이 캠프 때 쓸 N개의 랜선을 만들어야 하는데 너무 바빠서 영식이에게 도움을 청했다.

이미 오영식은 자체적으로 K개의 랜선을 가지고 있다. 그러나 K개의 랜선은 길이가 제각각이다. 박성원은 랜선을 모두 N개의 같은 길이의 랜선으로 만들고 싶었기 때문에 K개의 랜선을 잘라서 만들어야 한다. 예를 들어 300cm 짜리 랜선에서 140cm 짜리 랜선을 두 개 잘라내면 20cm는 버려야 한다. (이미 자른 랜선은 붙일 수 없다.)

편의를 위해 랜선을 자르거나 만들 때 손실되는 길이는 없다고 가정하며, 기존의 K개의 랜선으로 N개의 랜선을 만들 수 없는 경우는 없다고 가정하자. 그리고 자를 때는 항상 센티미터 단위로 정수길이만큼 자른다고 가정하자. N개보다 많이 만드는 것도 N개를 만드는 것에 포함된다. 이때 만들 수 있는 최대 랜선의 길이를 구하는 프로그램을 작성하시오.

입력
첫째 줄에는 오영식이 이미 가지고 있는 랜선의 개수 K, 그리고 필요한 랜선의 개수 N이 입력된다. K는 1이상 10,000이하의 정수이고, N은 1이상 1,000,000이하의 정수이다. 그리고 항상 K ≦ N 이다. 그 후 K줄에 걸쳐 이미 가지고 있는 각 랜선의 길이가 센티미터 단위의 정수로 입력된다. 랜선의 길이는 231-1보다 작거나 같은 자연수이다.

출력
첫째 줄에 N개를 만들 수 있는 랜선의 최대 길이를 센티미터 단위의 정수로 출력한다.

예제 입력 1 
4 11
802
743
457
539
예제 출력 1 
200
*/

// 풀이
import java.util.*;

public class Main {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        int N = sc.nextInt();
        int line[] = new int[K]; 
        
        for(int i=0; i<K; i++){
            line[i] = sc.nextInt();
        }
        
        // 이분탐색을 위해서는 배열을 정렬해주어야 한다.
        Arrays.sort(line);
        // 랜선의 최고 길이가 int의 마지막에 걸리기 때문에, while문을 진행하는 경우 mid, max, min 모두가 해당 범위를 벗어 날 수 있다.
        long mid = 0;
        long min = 1;
        long max = line[K-1];
        
        // 이분탐색 process
        while(max >= min){
            // 가운데 값 mid
            mid = ( max + min ) / 2;
            long whole = 0;   // 잘라서 만들 수 있는 최대 개수
            for(int i=0; i<K; i++)
                whole += line[i]/mid;   // 최고 개수는 모든 랜선의 길이들을 더해서 구한다.
                
            if( whole >= N ) min = mid+1;   // 그렇게 구한 개수가 원하는 개수만큼 만들어지거나 그보다 많이 만들어지면 더 크게 잘라서 만들 수 있는지 판단해 본다.
            else if( whole < N ) max = mid-1;   // 구해보니까 안되면 크기를 줄여 본다.
            // 이거를 max < min이 될 때 까지 구하면 가장 크게 자르는 max를 찾을 수 있다.
        }

      System.out.println(max);
    }
}
