/*
1449번
제출
맞은 사람
숏코딩
재채점
채점 현황
내 제출
강의
질문 검색
수리공 항승 분류
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	128 MB	7943	3071	2642	38.876%
문제
항승이는 품질이 심각하게 나쁜 수도 파이프 회사의 수리공이다. 항승이는 세준 지하철 공사에서 물이 샌다는 소식을 듣고 수리를 하러 갔다.

파이프에서 물이 새는 곳은 신기하게도 가장 왼쪽에서 정수만큼 떨어진 거리만 물이 샌다.

항승이는 길이가 L인 테이프를 무한개 가지고 있다.

항승이는 테이프를 이용해서 물을 막으려고 한다. 항승이는 항상 물을 막을 때, 적어도 그 위치의 좌우 0.5만큼 간격을 줘야 물이 다시는 안 샌다고 생각한다.

물이 새는 곳의 위치와, 항승이가 가지고 있는 테이프의 길이 L이 주어졌을 때, 항승이가 필요한 테이프의 최소 개수를 구하는 프로그램을 작성하시오. 테이프를 자를 수 없고, 테이프를 겹쳐서 붙이는 것도 가능하다.

입력
첫째 줄에 물이 새는 곳의 개수 N과 테이프의 길이 L이 주어진다. 둘째 줄에는 물이 새는 곳의 위치가 주어진다. N과 L은 1,000보다 작거나 같은 자연수이고, 물이 새는 곳의 위치는 1,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 항승이가 필요한 테이프의 개수를 출력한다.

예제 입력 1 
4 2
1 2 100 101
예제 출력 1 
2
*/

// 풀이
import java.util.*;
import java.io.IOException; 
public class Main {	
	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int L = sc.nextInt();
		Integer location[] = new Integer[N];
		
		for(int i=0; i<N; i++)
			location[i] = sc.nextInt();
		
		// 물이 새는 위치를 왼쪽부터 가까운 순으로 정렬하고, 좌우 0.5만큼 추가해야 하면, 테이프를 붙일 때 왼쪽은 원래보다 0.5만큼 더 왼쪽, 오른쪽은은 원래보다 0.5만큼 더 오른쪽에 붙여야 한다.
		// 따라서 테이프를 붙일 때 구간 거리 + 1이 테이프의 길이 L보다 작거나 같으면 한개의 테이프로 해결 가능하다.
		// 기준을 테이프의 길이만큼 정하고 구하면 된다.
		
		Arrays.sort(location);	// 먼저 가까운 순서로 정렬(sort)해 준다.
		
		int ans=0;
		for(int i=0; i<N; i++)
		{
			// 뒤의 while문에서 거리를 구해서 푼다. 그런데 마지막 while문이 목적지 직전에서 끝나는 경우 즉 테이프 하나로 마지막 위치 직전까지 막은 경우 맨 오른쪽, 즉 마지막 위치를 막으려면 무조건 한개의 테이프가 필요한다.
			if(i==N-1)
			{
				ans++;
				break;
			}

			// i가 더 왼쪽의 구멍 위치, j가 오른쪽 구멍 위치이다. 
			int j=i;
			// j는 무조건 i보다 한 칸 위에서 진행해야 하므로 while문의 조건을 N-1로 해 주었다. 밑에 보면 j++이 있으므로 결국 최종 처리는 N전까지 된다.
			while(j < N-1)
			{
				j++;
				// 오른쪽(j위치)부터 왼쪽(i위치)까지 거리 + 얖옆 0.5를 해서 그게 L보다 큰 경우 테이프는 하나 더 필요하다.
				if(location[j] - location[i] + 1 > L)
				{
					// 해당 j의 위치는 테이프 하나로 막을 수 없는 것이 밝혀졌으니 이제 여기부터 다시 재야한다. 그런데 for문에서 i++이 진행되니 미리 하나 빼서 i로 넣어준다.
					i = j-1;
					// 테이프 1개 더 필요
					ans++;
					break;
				}
			}
		}
		
		
		System.out.println(ans);
		
	}

}
	
