/*
퇴사 성공분류
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	512 MB	47124	23248	14843	47.834%
문제
상담원으로 일하고 있는 백준이는 퇴사를 하려고 한다.

오늘부터 N+1일째 되는 날 퇴사를 하기 위해서, 남은 N일 동안 최대한 많은 상담을 하려고 한다.

백준이는 비서에게 최대한 많은 상담을 잡으라고 부탁을 했고, 비서는 하루에 하나씩 서로 다른 사람의 상담을 잡아놓았다.

각각의 상담은 상담을 완료하는데 걸리는 기간 Ti와 상담을 했을 때 받을 수 있는 금액 Pi로 이루어져 있다.

N = 7인 경우에 다음과 같은 상담 일정표를 보자.

 	1일	2일	3일	4일	5일	6일	7일
Ti	3	5	1	1	2	4	2
Pi	10	20	10	20	15	40	200
1일에 잡혀있는 상담은 총 3일이 걸리며, 상담했을 때 받을 수 있는 금액은 10이다. 5일에 잡혀있는 상담은 총 2일이 걸리며, 받을 수 있는 금액은 15이다.

상담을 하는데 필요한 기간은 1일보다 클 수 있기 때문에, 모든 상담을 할 수는 없다. 예를 들어서 1일에 상담을 하게 되면, 2일, 3일에 있는 상담은 할 수 없게 된다. 2일에 있는 상담을 하게 되면, 3, 4, 5, 6일에 잡혀있는 상담은 할 수 없다.

또한, N+1일째에는 회사에 없기 때문에, 6, 7일에 있는 상담을 할 수 없다.

퇴사 전에 할 수 있는 상담의 최대 이익은 1일, 4일, 5일에 있는 상담을 하는 것이며, 이때의 이익은 10+20+15=45이다.

상담을 적절히 했을 때, 백준이가 얻을 수 있는 최대 수익을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 N (1 ≤ N ≤ 15)이 주어진다.

둘째 줄부터 N개의 줄에 Ti와 Pi가 공백으로 구분되어서 주어지며, 1일부터 N일까지 순서대로 주어진다. (1 ≤ Ti ≤ 5, 1 ≤ Pi ≤ 1,000)

출력
첫째 줄에 백준이가 얻을 수 있는 최대 이익을 출력한다.

예제 입력 1 
7
3 10
5 20
1 10
1 20
2 15
4 40
2 200
예제 출력 1 
45
예제 입력 2 
10
1 1
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10
예제 출력 2 
55
예제 입력 3 
10
5 10
5 9
5 8
5 7
5 6
5 10
5 9
5 8
5 7
5 6
예제 출력 3 
20
예제 입력 4 
10
5 50
4 40
3 30
2 20
1 10
1 10
2 20
3 30
4 40
5 50
예제 출력 4 
90
*/

// 풀이
import java.util.*;

public class Main {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        // 벌수 있는 돈 money
        // N+2를 기준으로 했던 이유는 1일부터 계산해서 처음 숫자가 0이 아니라 1이고, 마지막 money의 계산은 c최종 for문이 끝난 후에 계산되므로 이를위해 하나 더 많은 값을 넣어주었다.
        int money[] = new int[N+2];
        
        // 시간, 값
        int givenTime[] = new int[N+2];
        int givenVal[] = new int[N+2];
        
        // 최대 돈 ans
        int ans = 0;
        
        // 값 입력부분
        for(int i=0; i<N; i++){
            givenTime[i+1] = sc.nextInt();
            givenVal[i+1] = sc.nextInt();
        }
        
        // 실제 DP부분
        // 1일부터 진행하고 N+1->목표 까지 진행하고 그 값을 ans에 넣어준다. N+2에서 만들어질 수도 있는 값은 들어가지 않는다.
        for(int i=1; i<N+2; i++){
            // 현재값과 얻을 수 있는 값중 더 큰 값이 최대 이익이 될 것이다.
            // 처음부터 끝까지 값들을 통해 만들 수 있는 돈들을 전부 계산한다.
            ans = Math.max(ans, money[i]);
            // 최대 시간은 N+1이 될 것이다.
            if(i+givenTime[i] < N+2) // 해당 날짜까지 벌수 있는 돈을 구한다.
                money[i+givenTime[i]] = Math.max(money[i+givenTime[i]], ans+givenVal[i]);
                // i+givenTime은 최대날짜인데, 해당 날짜에 만드는 최대 금액을 기입한다.
                // 이전까지 만들어졌던 돈 + 이번에 더할 돈이거나, 그 전에 만든 돈이거나 둘중  하나일 것이다.
        }
            
        

      System.out.println(ans);
    }
}
