/*
1로 만들기 분류
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
0.15 초 (하단 참고)	128 MB	146842	46066	29222	31.825%
문제
정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

X가 3으로 나누어 떨어지면, 3으로 나눈다.
X가 2로 나누어 떨어지면, 2로 나눈다.
1을 뺀다.
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.

입력
첫째 줄에 1보다 크거나 같고, 106보다 작거나 같은 정수 N이 주어진다.

출력
첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.

예제 입력 1 
2
예제 출력 1 
1
예제 입력 2 
10
예제 출력 2 
3
*/

// 풀이
import java.util.*;

public class Main {
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		// 여기서 N+1로 설정하면 틀렸다...이유를 모르겠음.
    int dp[] = new int[1000001];
		sc.close();
		
    // dp의 index는 input 숫자로 할 것이다 즉 정답을 dp[N]으로 할것이다. 따라서 dp[0] 은 사용하지 않음
    // 먼저 1이면(dp[1]) 아무 연산이 필요가 없고, 2나 3이면 1개의 연산이 필요할 것이다. 이를 미리 넣어 준다.
		dp[1] = 0;
		dp[2] = 1;
		dp[3] = 1;
		
    // 4부터는 미리 구해 놓은 연산을 활용하여 구할 수 있다.
    // 풀이 방법은 다음과 같다.
    // 3으로 나누어 떨어지는 경우, 이전의 숫자가 "해당 숫자/3" 일 수도, "해당 숫자-1"일 수도 있다. 그렇다면 둘 중 작은 것이 3으로 나누어 떨어지는 경우 최소값일 것이다.
    // 그곳에 1을 더하면 3으로 나누어 떨어지는 경우의 최소 연산이다.
    // 마찬가지로 2로 나누어 떨어지는 경우, 이전의 숫자는 "해당 숫자/2"일 수도, "해당 숫자-1"일 수도 있다. 이중 작은 것이 최소값이다.
    // 1로 빼는 경우는 한 가지 경우밖에 없으므로 이전 값에 1을 더한다.
    
    // 추가로 만약에 3으로 2로 모두 나누어 떨어지는 경우, "해당 숫자/3", "해당 숫자/2", "해당 숫자-1" 세 가지 경우중 가장 작은 경우를 뺴주면 된다.
    
    // 핵심은 어떤 숫자를 구할 때 그 숫자가 아니라 작은 부분부터 만들어 간다는 것이다. 예를 들어 10의 경우는 1(0)->3(1)->9(2)->10(3)이다.
    // 10에서 빼가면서 구하지 말고 작은 수부터 ~ 10까지 구해가면서 풀면 된다.
		for(int i=4; i<=N; i++) {
			if(i%6 == 0) { /
				dp[i] = Math.min(Math.min(dp[i/3], dp[i/2]), dp[i-1]) + 1;
			}else if(i%3 == 0) {
				dp[i] = Math.min(dp[i/3], dp[i-1]) + 1;
			}else if(i%2 == 0) {
				dp[i] = Math.min(dp[i/2], dp[i-1]) + 1;
			}else {
				dp[i] = dp[i-1] + 1;
			}
		}
		System.out.println(dp[N]);
	}
}
