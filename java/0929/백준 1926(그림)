/*
그림 성공
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	128 MB	9587	4250	3001	43.025%
문제
어떤 큰 도화지에 그림이 그려져 있을 때, 그 그림의 개수와, 그 그림 중 넓이가 가장 넓은 것의 넓이를 출력하여라. 단, 그림이라는 것은 1로 연결된 것을 한 그림이라고 정의하자. 가로나 세로로 연결된 것은 연결이 된 것이고 대각선으로 연결이 된 것은 떨어진 그림이다. 그림의 넓이란 그림에 포함된 1의 개수이다.

입력
첫째 줄에 도화지의 세로 크기 n(1 ≤ n ≤ 500)과 가로 크기 m(1 ≤ m ≤ 500)이 차례로 주어진다. 두 번째 줄부터 n+1 줄 까지 그림의 정보가 주어진다. (단 그림의 정보는 0과 1이 공백을 두고 주어지며, 0은 색칠이 안된 부분, 1은 색칠이 된 부분을 의미한다)

출력
첫째 줄에는 그림의 개수, 둘째 줄에는 그 중 가장 넓은 그림의 넓이를 출력하여라. 단, 그림이 하나도 없는 경우에는 가장 넓은 그림의 넓이는 0이다.

예제 입력 1 
6 5
1 1 0 1 1
0 1 1 0 0
0 0 0 0 0
1 0 1 1 1
0 0 1 1 1
0 0 1 1 1
예제 출력 1 
4
9
*/

// 풀이
import java.util.*;

public class Main {
    public static int n;
    public static int m;
    public static int draw[][];
    public static boolean check[][];
    
    public static int now;
    public static int maxCnt = 0;
    public static int drawCnt = 0;
    
    public static int xMove[] = {-1, 1, 0, 0};
    public static int yMove[] = {0, 0, -1, 1};
    public static void main(String args[]) {

        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        draw = new int[n][m];
        check = new boolean[n][m];
        
        for(int i=0; i<n; i++){
          for(int j=0; j<m; j++){
            draw[i][j] = sc.nextInt();
          }
        }
        
        for(int i=0; i<n; i++){
          for(int j=0; j<m; j++){
            if(!check[i][j] && draw[i][j]==1){
              drawCnt++;
              now = 0;
              dfs(i, j);
              maxCnt = Math.max(maxCnt, now);
            } 
          }
        }
        System.out.println(drawCnt);
        System.out.println(maxCnt);
    }
    public static void dfs(int x, int y){
        if(x<0||x>=n||y<0||y>=m) return;
        if(check[x][y] || draw[x][y]==0) return;
        check[x][y] = true;
        now++;
        
        for(int i=0; i<4; i++) dfs(x+xMove[i], y+yMove[i]);
    }
}
