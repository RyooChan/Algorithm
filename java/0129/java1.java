/*
주식가격
문제 설명
초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.

제한사항
prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.
prices의 길이는 2 이상 100,000 이하입니다.
입출력 예
prices	return
[1, 2, 3, 2, 3]	[4, 3, 1, 1, 0]
입출력 예 설명
1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.
2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.
3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.
4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.
5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.
※ 공지 - 2019년 2월 28일 지문이 리뉴얼되었습니다.
*/

// 풀이
class Solution 
{
    public int[] solution(int[] prices) 
    {
        // 문제 설명이 너무 불친절하다. prices[0]의 경우 prices[1~4]까지 값들이 다 이것보다 크기 때문에 총 4초간 떨어지지 않고, prices[2]의 경우 바로 다음 prices[3]이 떨어지니까 1초 뒤에 가격이 떨어지는 식으로 생각하면 된다. 문제 설명이 이상함.
        // answer의 경우 초기화를 해주기 위해 pricess의 길이만큼을 선언해 주었다.
        int[] answer = new int[prices.length];
        
        // 이중for문 썼는데도 효율성을 통과함. 이유를 모르겠다.
        for (int i = 0; i < answer.length; i++) 
        {
            for (int j = i+1; j < answer.length; j++) 
            {
                // 뒤에 지금 값보다 작은 값이 존재할 경우, 즉 주식이 떨어지는 경우.
                if (prices[i] > prices[j]) 
                {
                    // 해당 시점까지의 시간경과를 적어주고 탈출.
                    answer[i] = j-i;
                    break;
                }
                // 주식이 떨어지지 않는 경우 현재 시간부터 마지막까지 시간을 걸리는 시간을 더해준다.
                if (j==answer.length-1) answer[i] = j-i;
            }
        }
        return answer;
    }
}
