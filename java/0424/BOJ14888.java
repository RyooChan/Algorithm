/*
연산자 끼워넣기 분류
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	512 MB	40158	21281	13266	49.604%
문제
N개의 수로 이루어진 수열 A1, A2, ..., AN이 주어진다. 또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.

우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 이때, 주어진 수의 순서를 바꾸면 안 된다.

예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 예를 들어, 아래와 같은 식을 만들 수 있다.

1+2+3-4×5÷6
1÷2+3+4-5×6
1+2÷3×4-5+6
1÷2×3-4+5+6
식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.

1+2+3-4×5÷6 = 1
1÷2+3+4-5×6 = 12
1+2÷3×4-5+6 = 5
1÷2×3-4+5+6 = 7
N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 둘째 줄에는 A1, A2, ..., AN이 주어진다. (1 ≤ Ai ≤ 100) 셋째 줄에는 합이 N-1인 4개의 정수가 주어지는데, 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다. 

출력
첫째 줄에 만들 수 있는 식의 결과의 최댓값을, 둘째 줄에는 최솟값을 출력한다. 연산자를 어떻게 끼워넣어도 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다. 또한, 앞에서부터 계산했을 때, 중간에 계산되는 식의 결과도 항상 -10억보다 크거나 같고, 10억보다 작거나 같다.

예제 입력 1 
2
5 6
0 0 1 0
예제 출력 1 
30
30
예제 입력 2 
3
3 4 5
1 0 1 0
예제 출력 2 
35
17
예제 입력 3 
6
1 2 3 4 5 6
2 1 1 1
예제 출력 3 
54
-24
*/

// 풀이
import java.util.*;

public class Main {
  // 입력의 결과값은 항상 -10억보다 크거나 같고, 10억보다 작거나 같다.
	public static int MAX = -1000000000;
	public static int MIN = 1000000000;
  // 숫자
	public static int[] num;
  // 연산자
	public static int[] op;
  // 숫자 개수
	public static int A;
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		A = sc.nextInt();
		// 숫자를 입력받고, 연산자는 +, -, *, / 순서로 입력받을 예정이니 0, 1, 2, 3 의 4가지 선언
		num = new int[A];
		op = new int[4];
		
		for(int i=0; i<A; i++)
			num[i] = sc.nextInt();
		
		for(int i=0; i<4; i++) {
			op[i] = sc.nextInt();
		}
		
    // DFS로 실행할 것이다. 숫자는 순서대로 들어가니 num[0]으로 순서를 시작한다.
    // 총 연산의 개수는 해당 숫자만큼 진행하면 된다. A번 진행할 것이니 1~N까지 하면 A번 진행하게 된다.
		DFS(num[0],  1);
    
    // 최대 최소값 출력
		System.out.println(MAX);
		System.out.println(MIN);
	}
	
  // DFS재귀함수 -> 숫자, 연산 횟수
	public static void DFS(int number, int cnt) {
    // A번 진행했으면 최대값인지 최소값인지 판단하여 현재 상태의 최대 / 최소값을 반환한다.
		if(cnt == A) {
			MAX = Math.max(MAX, number);
			MIN = Math.min(MIN, number);
			return;
		}
	
     // 연산은 모든 연산자를 돌리면서 진행한다. -> 이렇게 하면 모든 경우를 다 확인하면서 진행 가능하다 1-2-3-4, 1-2-4-3-.....
		for(int i=0; i<4; i++) {
      // 해당하는 연산이 존재할 경우만 if문을 진행해 준다.
			if( op[i] > 0) {
        // 이 연산이 진행되었으므로 다음 DFS를 실행하기 전에 그걸 하나 빼 주어 중복연산을 불가능하게 한다.
				op[i]--;
				
        // 해당 연산자의 종류에 맞춰 다음 num를 넣어주고, 횟수 증가
				if(i == 0) 
					DFS( number + num[cnt], cnt+1 );
				else if(i == 1)
					DFS( number - num[cnt], cnt+1);
				else if(i == 2)
					DFS( number * num[cnt], cnt+1);
				else if(i == 3)
					DFS( number / num[cnt], cnt+1);
				
				op[i]++;
			}
		}
	}
}
