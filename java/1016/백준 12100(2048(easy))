/*
2048 (Easy) 성공
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초	512 MB	51384	14183	8040	25.108%
문제
2048 게임은 4×4 크기의 보드에서 혼자 즐기는 재미있는 게임이다. 이 링크를 누르면 게임을 해볼 수 있다.

이 게임에서 한 번의 이동은 보드 위에 있는 전체 블록을 상하좌우 네 방향 중 하나로 이동시키는 것이다. 이때, 같은 값을 갖는 두 블록이 충돌하면 두 블록은 하나로 합쳐지게 된다. 한 번의 이동에서 이미 합쳐진 블록은 또 다른 블록과 다시 합쳐질 수 없다. (실제 게임에서는 이동을 한 번 할 때마다 블록이 추가되지만, 이 문제에서 블록이 추가되는 경우는 없다)

		
<그림 1>	<그림 2>	<그림 3>
<그림 1>의 경우에서 위로 블록을 이동시키면 <그림 2>의 상태가 된다. 여기서, 왼쪽으로 블록을 이동시키면 <그림 3>의 상태가 된다.

			
<그림 4>	<그림 5>	<그림 6>	<그림 7>
<그림 4>의 상태에서 블록을 오른쪽으로 이동시키면 <그림 5>가 되고, 여기서 다시 위로 블록을 이동시키면 <그림 6>이 된다. 여기서 오른쪽으로 블록을 이동시켜 <그림 7>을 만들 수 있다.

	
<그림 8>	<그림 9>
<그림 8>의 상태에서 왼쪽으로 블록을 옮기면 어떻게 될까? 2가 충돌하기 때문에, 4로 합쳐지게 되고 <그림 9>의 상태가 된다.

			
<그림 10>	<그림 11>	<그림 12>	<그림 13>
<그림 10>에서 위로 블록을 이동시키면 <그림 11>의 상태가 된다. 

<그림 12>의 경우에 위로 블록을 이동시키면 <그림 13>의 상태가 되는데, 그 이유는 한 번의 이동에서 이미 합쳐진 블록은 또 합쳐질 수 없기 때문이다.

	
<그림 14>	<그림 15>
마지막으로, 똑같은 수가 세 개가 있는 경우에는 이동하려고 하는 쪽의 칸이 먼저 합쳐진다. 예를 들어, 위로 이동시키는 경우에는 위쪽에 있는 블록이 먼저 합쳐지게 된다. <그림 14>의 경우에 위로 이동하면 <그림 15>를 만든다.

이 문제에서 다루는 2048 게임은 보드의 크기가 N×N 이다. 보드의 크기와 보드판의 블록 상태가 주어졌을 때, 최대 5번 이동해서 만들 수 있는 가장 큰 블록의 값을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 보드의 크기 N (1 ≤ N ≤ 20)이 주어진다. 둘째 줄부터 N개의 줄에는 게임판의 초기 상태가 주어진다. 0은 빈 칸을 나타내며, 이외의 값은 모두 블록을 나타낸다. 블록에 쓰여 있는 수는 2보다 크거나 같고, 1024보다 작거나 같은 2의 제곱꼴이다. 블록은 적어도 하나 주어진다.

출력
최대 5번 이동시켜서 얻을 수 있는 가장 큰 블록을 출력한다.

예제 입력 1 
3
2 2 2
4 4 4
8 8 8
예제 출력 1 
16
*/

// 풀이
import java.util.*;

public class Main {  
	public static int ans = 2;  // 보드들의 최소값은 2이다.
	public static int N;
	
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);

    // 보드 입력단.
		N = sc.nextInt();
		int map[][] = new int[N][N];
		for(int i=0; i<N; i++) {
			for(int j=0; j<N; j++) {
				map[i][j] = sc.nextInt();
			}
		}
		
    // 위 아래 양옆의 모든 경우를 시작해 준다. 
		up(map, 0);
		down(map, 0);
		left(map, 0);;
		right(map, 0);
			
		System.out.println(ans);
	}
	public static void up(int map[][], int nowCnt) {  // 이전에 만들어진 map과 지금까지 진행한 숫자 nowCnt
		int nowMap[][] = new int[N][N];   // 이번 함수를 통해 만들 nowMap
		boolean once = false;   // 한 번 값이 합쳐지면 그렇게 만들어진 값은 다시 합쳐지면 안된다.
		for(int j=0; j<N; j++) {  // 이게 중요한데, 위에서부터 하는 것이므로 i와 j가 반대로 될 것이다. 아래, 오른쪽, 왼쪽은 이와같이 생각하면 된다.
			Stack<Integer> filter = new Stack<>();    // 빈 칸을 없애기 위해 사용할 filter
			for(int i=0; i<N; i++) {
				if(map[i][j]!=0)    // 빈 칸이면 걍 무시하고 지나가버리기~
				if(filter.isEmpty()) {    // filter가 비었으면 당연히 하나는 넣어줘야한다.
					filter.add(map[i][j]);
					once = false;   // 첫값이면 무조건 위의숫자랑 더해졌을리가 없다.
				}else {
					if(filter.peek()==map[i][j] && !once) { // 앞의 과정에서 들어간 값과 이제 비교할 숫자가 같은경우, 또 앞의 과정에서 들어간 값이 이미 한번 더해진 경우가 아닌 경우
						int before = filter.pop();
						filter.add(before*2);   // 숫자를 2배 해준다.
						once = true;    // 이렇게 stack의 맨 위에 들어간 숫자는 또 더해져서는 안된다.
						continue;
					}else {   // 둘의 숫자가 다르거나, 이미 한번 더해준 숫자인 경우는 그냥 다음 숫자를 넣어주면 된다.
						filter.add(map[i][j]);
						once = false; // 이 값은 더해진 것이 아니므로 다시 false
					}
				}
			}
			while(!filter.isEmpty()) {    // 그렇게 해당하는 줄의 숫자들을 완성했으면 빈칸 없이 넣어준다.
				int num = filter.pop();   // 하나 꺼냄
				ans = Math.max(ans, num);   // 그리고 만들어진 숫자들 중 최대값을 저장한다
				nowMap[filter.size()][j] = num;   // 보면 제일먼저 만든숫자가 맨 나중에 나오고, 가장 최근에 만들어진 숫자가 처음 나온다. 그리고 가장 먼저 만든 숫자는 맨 위로 가야하고 그러면 거꾸로 하면 된다.
			}
		}
    // 5번 하는 경우들을 전체 검색
		nowCnt++;
		if(checkCnt(nowCnt)) {
			return;
		}
		up(nowMap, nowCnt);
		down(nowMap, nowCnt);
		left(nowMap, nowCnt);
		right(nowMap, nowCnt);
	}
  // 아래도 이와 비슷한 로직이다.
	public static void down(int map[][], int nowCnt) {
		int nowMap[][] = new int[N][N];
		boolean once = false;
		for(int j=0; j<N; j++) {
			Stack<Integer> filter = new Stack<>();
			for(int i=N-1; i>=0; i--) {
				if(map[i][j]!=0) {
					if(filter.isEmpty()) {
						filter.add(map[i][j]);
						once = false;
					}else {
						if(filter.peek()==map[i][j] && !once) {
							int before = filter.pop();
							filter.add(before*2);
							once = true;
							continue;
						}else {
							filter.add(map[i][j]);
							once = false;
						}
					}
				}
			}
			while(!filter.isEmpty()) {
				int num = filter.pop();
				ans = Math.max(ans, num);
				nowMap[filter.size()][j] = num;
			}
		}
		nowCnt++;
		if(checkCnt(nowCnt)) {
			return;
		}
		up(nowMap, nowCnt);
		down(nowMap, nowCnt);
		left(nowMap, nowCnt);
		right(nowMap, nowCnt);
	}
	public static void left(int map[][], int nowCnt) {
		int nowMap[][] = new int[N][N];
		boolean once = false;
		for(int i=0; i<N; i++) {
			Stack<Integer> filter = new Stack<>();
			for(int j=0; j<N; j++) {
				if(map[i][j]!=0) {
					if(filter.isEmpty()) {
						filter.add(map[i][j]);
						once = false;
					}else {
						if(filter.peek()==map[i][j] && !once) {
							int before = filter.pop();
							filter.add(before*2);
							once = true;
							continue;
						}else {
							filter.add(map[i][j]);
							once = false;
						}
					}
				}
			}
			while(!filter.isEmpty()) {
				int num = filter.pop();
				ans = Math.max(ans, num);
				nowMap[i][filter.size()] = num;
			}
		}
		nowCnt++;
		if(checkCnt(nowCnt)) {
			return;
		}
		up(nowMap, nowCnt);
		down(nowMap, nowCnt);
		left(nowMap, nowCnt);
		right(nowMap, nowCnt);
	}
	public static void right(int map[][], int nowCnt) {
		int nowMap[][] = new int[N][N];
		boolean once = false;
		for(int i=0; i<N; i++) {
			Stack<Integer> filter = new Stack<>();
			for(int j=N-1; j>=0; j--) {
				if(map[i][j]!=0) {
					if(filter.isEmpty()) {
						filter.add(map[i][j]);
						once = false;
					}else {
						if(filter.peek()==map[i][j] && !once) {
							int before = filter.pop();
							filter.add(before*2);
							once = true;
							continue;
						}else {
							filter.add(map[i][j]);
							once = false;
						}
					}
				}
			}
			while(!filter.isEmpty()) {
				int num = filter.pop();
				ans = Math.max(ans, num);
				nowMap[i][filter.size()] = num;
			}
		}
		nowCnt++;
		if(checkCnt(nowCnt)) {
			return;
		}
		up(nowMap, nowCnt);
		down(nowMap, nowCnt);
		left(nowMap, nowCnt);
		right(nowMap, nowCnt);
	}
	public static boolean checkCnt(int cnt) {
		if(cnt==5) return true;
		return false;
	}
}

// 해설
https://hello-backend.tistory.com/58
