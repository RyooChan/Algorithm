/*
종이의 개수 성공
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	256 MB	20693	12162	9172	58.765%
문제
N×N크기의 행렬로 표현되는 종이가 있다. 종이의 각 칸에는 -1, 0, 1 중 하나가 저장되어 있다. 우리는 이 행렬을 다음과 같은 규칙에 따라 적절한 크기로 자르려고 한다.

만약 종이가 모두 같은 수로 되어 있다면 이 종이를 그대로 사용한다.
(1)이 아닌 경우에는 종이를 같은 크기의 종이 9개로 자르고, 각각의 잘린 종이에 대해서 (1)의 과정을 반복한다.
이와 같이 종이를 잘랐을 때, -1로만 채워진 종이의 개수, 0으로만 채워진 종이의 개수, 1로만 채워진 종이의 개수를 구해내는 프로그램을 작성하시오.

입력
첫째 줄에 N(1 ≤ N ≤ 37, N은 3k 꼴)이 주어진다. 다음 N개의 줄에는 N개의 정수로 행렬이 주어진다.

출력
첫째 줄에 -1로만 채워진 종이의 개수를, 둘째 줄에 0으로만 채워진 종이의 개수를, 셋째 줄에 1로만 채워진 종이의 개수를 출력한다.

예제 입력 1 
9
0 0 0 1 1 1 -1 -1 -1
0 0 0 1 1 1 -1 -1 -1
0 0 0 1 1 1 -1 -1 -1
1 1 1 0 0 0 0 0 0
1 1 1 0 0 0 0 0 0
1 1 1 0 0 0 0 0 0
0 1 -1 0 1 -1 0 1 -1
0 -1 1 0 1 -1 0 1 -1
0 1 -1 1 0 -1 0 1 -1
예제 출력 1 
10
12
11
*/

// 풀이
import java.util.Scanner;

public class Main {
	public static int paper[][];
	public static int N;
	public static int ans[] = new int[3];
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		
		paper = new int[N][N];
		
		for(int i=0; i<N; i++) {
			for(int j=0; j<N; j++) {
				paper[i][j] = sc.nextInt();
			}
		}
		QT(0, 0, N);
		for(int i=0; i<3; i++)System.out.println(ans[i]);
	}
	public static void QT(int x, int y, int size) {
		int nowNum = paper[x][y];
		if(allSame(x, y, size, nowNum)) {
			ans[nowNum+1]++;
			return;
		}
		int changeSize = size/3;
		QT(x, y, changeSize);
		QT(x+changeSize, y, changeSize);
		QT(x+changeSize*2, y, changeSize);
		QT(x, y+changeSize, changeSize);
		QT(x, y+changeSize*2, changeSize);
		QT(x+changeSize, y+changeSize, changeSize);
		QT(x+changeSize*2, y+changeSize, changeSize);
		QT(x+changeSize, y+changeSize*2, changeSize);
		QT(x+changeSize*2, y+changeSize*2, changeSize);
		
	}
	public static boolean allSame(int x, int y, int size, int nowNum) {
		for(int i=x; i<x+size; i++) {
			for(int j=y; j<y+size; j++) {
				if(nowNum != paper[i][j]) {
					return false;
				}
			}
		}
		return true;
	}
}

// 해설
https://hello-backend.tistory.com/50
