// 다음과 같이 import를 사용할 수 있습니다.
import java.util.*;
class Solution {
    public static int xMove[] = {-1, 1, 0, 0};
    public static int yMove[] = {0, 0, -1, 1};
    public int solution(int[][] garden) {
        // 여기에 코드를 작성해주세요.
        int answer = 0;
        Queue<info> flower = new LinkedList<>();
        
        for(int i=0; i<garden.length; i++){
            for(int j=0; j<garden[0].length; j++){
                if(garden[i][j]==1) flower.add(new info(i, j));
            }
        }
        
        while(!flower.isEmpty()){
            info info = flower.poll();
            int x = info.x;
            int y = info.y;
            for(int i=0; i<4; i++){
                int xTo = x-xMove[i];
                int yTo = y-yMove[i];
                if(xTo<0 || yTo<0 || xTo>=garden.length || yTo>=garden[0].length) continue;
                if(garden[xTo][yTo]==0){
                    int days = garden[x][y];
                    int nextDay = days+1;
                    garden[xTo][yTo] = nextDay;
                    flower.add(new info(xTo, yTo));
                    answer = Math.max(answer, nextDay-1);
                }
            }
        }
        
        return answer;
    }
    
    // 아래는 테스트케이스 출력을 해보기 위한 main 메소드입니다.
    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] garden1 = {{0, 0, 0}, {0, 1, 0}, {0, 0, 0}};
        int ret1 = sol.solution(garden1);
        
        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("solution 메소드의 반환 값은 " + ret1 + " 입니다.");
        
        int[][] garden2 = {{1, 1}, {1, 1}};
        int ret2 = sol.solution(garden2);
        
        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("solution 메소드의 반환 값은 " + ret2 + " 입니다.");
        
    }    
}
class info{
    int x;
    int y;
    info(int x, int y){
        this.x = x;
        this.y = y;
    }
}
