/*
연구소 성공
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	512 MB	45979	26570	14404	55.004%
문제
인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 다행히 바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고 한다.

연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은 칸 하나를 가득 차지한다. 

일부 칸은 바이러스가 존재하며, 이 바이러스는 상하좌우로 인접한 빈 칸으로 모두 퍼져나갈 수 있다. 새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.

예를 들어, 아래와 같이 연구소가 생긴 경우를 살펴보자.

2 0 0 0 1 1 0
0 0 1 0 1 2 0
0 1 1 0 1 0 0
0 1 0 0 0 0 0
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0
이때, 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.

2행 1열, 1행 2열, 4행 6열에 벽을 세운다면 지도의 모양은 아래와 같아지게 된다.

2 1 0 0 1 1 0
1 0 1 0 1 2 0
0 1 1 0 1 0 0
0 1 0 0 0 1 0
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0
바이러스가 퍼진 뒤의 모습은 아래와 같아진다.

2 1 0 0 1 1 2
1 0 1 0 1 2 2
0 1 1 0 1 2 2
0 1 0 0 0 1 2
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0
벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서 안전 영역의 크기는 27이다.

연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최댓값을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)

둘째 줄부터 N개의 줄에 지도의 모양이 주어진다. 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 위치이다. 2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.

빈 칸의 개수는 3개 이상이다.

출력
첫째 줄에 얻을 수 있는 안전 영역의 최대 크기를 출력한다.

예제 입력 1 
7 7
2 0 0 0 1 1 0
0 0 1 0 1 2 0
0 1 1 0 1 0 0
0 1 0 0 0 0 0
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0
예제 출력 1 
27
예제 입력 2 
4 6
0 0 0 0 0 0
1 0 0 0 0 2
1 1 1 0 0 2
0 0 0 0 0 2
예제 출력 2 
9
예제 입력 3 
8 8
2 0 0 0 0 0 0 2
2 0 0 0 0 0 0 2
2 0 0 0 0 0 0 2
2 0 0 0 0 0 0 2
2 0 0 0 0 0 0 2
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
예제 출력 3 
3
*/

// 풀이
import java.util.*;

public class Main {
	public static int xMove[] = {-1, 1, 0, 0};
	public static int yMove[] = {0, 0, -1, 1};
	public static int lab[][];
	public static int labWall[][];
	public static int N;
	public static int M;
	public static Queue<coordinate> virusMove = new LinkedList<>();
	public static int ans = 0;
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		N = sc.nextInt();
		M = sc.nextInt();

		lab = new int[N][M];    // 처음 입력받은 연구소
		labWall = new int[N][M]; // 벽을 세운 뒤
		for(int i=0; i<N; i++) {
			for(int j=0; j<M; j++){
				lab[i][j] = sc.nextInt();   // 처음 연구소 위치를 입력받는다.
			}
		}
		DFS(0);     // BFS DFS모두 섞어서 풀어야한다.
		
		System.out.println(ans);
	}
	
	public static void DFS(int cnt) {
		if(cnt == 3) {    // 벽을 3개 세우면 BFS시도
			for(int i=0; i<N; i++) {
				for(int j=0; j<M; j++) {
					int input = lab[i][j];  
					labWall[i][j] = input;      // 벽을 세운 map위치를 입력받고
					if(input==2) virusMove.add(new coordinate(i, j));   // 바이러스 위치 큐에 입력
				}
			}
			while(!virusMove.isEmpty()) {
				coordinate cor = virusMove.remove();    // 큐값을 하나씩 뺴가면서
				for(int i=0; i<4; i++) {    // 모든 위치에 대해 BFS시도..
					int toX = cor.x+xMove[i];
					int toY = cor.y+yMove[i];
					if(toX<0 || toY<0 || toX>=N || toY>=M) continue; // 여기서 나는 return으로 하는 바람에 자꾸 안돼서 이상했다... 나가면 for문만 안해주면 됨.
					if(labWall[toX][toY]==0) {      // 아직 퍼지지 않은 공간이면
						labWall[toX][toY] = 2;      // 바이러스 퍼진다.
						virusMove.add(new coordinate(toX, toY)); // 여긴 퍼진곳이니까 또 여기서부터 퍼져나간다.
					}
				}
			}
			int count = 0;      // 위의 while이 끝나면 모든 map에 바이러스가 퍼진 것이 끝난다.
			for(int i=0; i<N; i++) {
				for(int j=0; j<M; j++) {
					if(labWall[i][j] == 0) count++;   // 그럼 안전 영역 숫자를 구한다.
				}
			}
			ans = Math.max(ans,  count);    // 최대 안전 영역 구하기
			return;
		}
		
		for(int i=0; i<N; i++) {    // 3개 세우는 모든 경우를 탐색한다. 사실 완전탐색으로 보면 될 듯.
			for(int j=0; j<M; j++) {
				if(lab[i][j]==0) {
					lab[i][j] = 1;
					DFS(cnt+1);
					lab[i][j] = 0;
				}
			}
		}
		
	}
	
}

class coordinate {    // 좌표 class
	int x;
	int y;
	
	coordinate(int x, int y){
		this.x = x;
		this.y = y;
	}
}
