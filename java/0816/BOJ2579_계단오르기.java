/*
계단 오르기 성공출처
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초	128 MB	91078	31227	22743	35.028%
문제
계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다. <그림 1>과 같이 각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는 점수를 얻게 된다.



<그림 1>

예를 들어 <그림 2>와 같이 시작점에서부터 첫 번째, 두 번째, 네 번째, 여섯 번째 계단을 밟아 도착점에 도달하면 총 점수는 10 + 20 + 25 + 20 = 75점이 된다.



<그림 2>

계단 오르는 데는 다음과 같은 규칙이 있다.

계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
마지막 도착 계단은 반드시 밟아야 한다.
따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다. 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세 번째 계단을 연속해서 모두 밟을 수는 없다.

각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을 구하는 프로그램을 작성하시오.

입력
입력의 첫째 줄에 계단의 개수가 주어진다.

둘째 줄부터 한 줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여 있는 점수가 주어진다. 계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.

출력
첫째 줄에 계단 오르기 게임에서 얻을 수 있는 총 점수의 최댓값을 출력한다.

예제 입력 1 
6
10
20
15
25
10
20
예제 출력 1 
75
*/

// 풀이
import java.util.*;

public class Main {

	public static void main(String[] args)  {
		
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		
		int stair[] = new int[N];
		int score[] = new int[N];
		int ans;
		
		for(int i=0; i<N; i++) stair[i] = sc.nextInt();		// 각각 계단을 밟을 때 얻을 수 있는 점수들 stair 입력받기
		
		if(N==1) {		// N이 1이면 정답은 그냥 첫번째 계단
			ans = stair[0];
		}else if(N==2) {	// N이 2이면 정답은 두번쨰 계단을 오르는 수인데 당연히 이거는 맨처음 밟고 두번째 밟기
			ans = stair[0]+stair[1];
		}else {			// N이 3보다 크거나 같은 경우
		score[0] = stair[0];		// 처음 계단을 밟는 최대 점수 = 처음 계단 밟기
		score[1] = stair[0]+stair[1];	// 두번째 계단을 밟는 최대 점수 = 처음+두번째 계단 밟기
		score[2] = Math.max(stair[0]+stair[2], stair[1]+stair[2]);	// 세번째 계단을 밟는 최대 점수 = 처음+세번째 / 두번째+세번째 중 큰수
		// 아맞다 근데 나는 이거 0부터 시작했는데 직관적으로 볼려면 1부터 시작하는게 편할것이다... 1 더해주고 1부터 시작하면 된다.
		
		for(int i=3; i<N; i++) {	// 4번째 계단부터 점수를 내는 최대 방법은
			score[i] = stair[i] + Math.max(score[i-3]+stair[i-1], score[i-2]);	// i번째 계단을 밟을때 받는 점수 + 그 전까지 최대점수(전전계단에서 이번계단으로 오는법 or 전계단에서 오는법) <- 이중 전계단에서 오는법은 전전전계단가는법+전계단 가는법이다. 왜냐면 3칸 연속으로 못옴.
		}
		ans = score[N-1];	// 정답은 마지막 계단까지 있는 점수들의 합
		}
		System.out.println(ans);
	}

}
