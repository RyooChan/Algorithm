/*
빗물 성공출처분류
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초	256 MB	3193	1682	1342	54.509%
문제
2차원 세계에 블록이 쌓여있다. 비가 오면 블록 사이에 빗물이 고인다.



비는 충분히 많이 온다. 고이는 빗물의 총량은 얼마일까?

입력
첫 번째 줄에는 2차원 세계의 세로 길이 H과 2차원 세계의 가로 길이 W가 주어진다. (1 ≤ H, W ≤ 500)

두 번째 줄에는 블록이 쌓인 높이를 의미하는 0이상 H이하의 정수가 2차원 세계의 맨 왼쪽 위치부터 차례대로 W개 주어진다.

따라서 블록 내부의 빈 공간이 생길 수 없다. 또 2차원 세계의 바닥은 항상 막혀있다고 가정하여도 좋다.

출력
2차원 세계에서는 한 칸의 용량은 1이다. 고이는 빗물의 총량을 출력하여라.

빗물이 전혀 고이지 않을 경우 0을 출력하여라.

예제 입력 1 
4 4
3 0 1 4
예제 출력 1 
5
예제 입력 2 
4 8
3 1 2 3 4 1 1 2
예제 출력 2 
5
예제 입력 3 
3 5
0 0 0 2 0
예제 출력 3 
0
*/

// 풀이
import java.util.*;

public class Main {
    public static void main(String args[]) {
        
        Scanner sc = new Scanner(System.in);
        int max = sc.nextInt();
        int T = sc.nextInt();
        int block[] = new int[T];
        
        int now = 0;
        int left = 0;
        int right = 0;
        
        for(int i=0; i<T; i++){
            block[i] = sc.nextInt();
        }
        
        // 블럭을 입력받고, 현재 블록 기준으로 오른쪽 에서 가장 높은 블록과 왼쪽에서 가장 높은 블록을 구해서 그 안에 고이는 빗물을 구해서 더해주면 된다.
        // 구하는 과정은 다음과 같다.
        // 1. 현재 블록을 구한다. 절대로 첫번째와 마지막 건물에 빗물이 고일 일은 없으므로 0부터 T-1까지 해준다.
        // 2. 현재 블록 기준으로 오른쪽에 가장 큰 건물과 왼쪽에 가장 큰 건물을 확인한다.
        // 3. 구해진 건물들 중 작은 건물에서, 현재 블록의 높이를 빼 주면 고이는 빗물이 될 것이다.
        // 이를 1~T-1까지 계속해서 구해주면 정답이 출력된다. 
   
        for(int i=1; i<T-1; i++){   // 블록 위치를 구하는 i
            for(int j=0; j<i; j++){ // 블록 기준 왼쪽 전체 확인해서 가장 높은 건물 기입
                left = Math.max(left, block[j]);
            }
            for(int k=i+1; k<T; k++){//블록 기준 오른쪽 전체 확인해서 가장 높은 건물 기입
                right = Math.max(right, block[k]);
            }
            if(block[i]<left && block[i]<right) // 둘중 낮은 건물 기준으로 구할 수 있는 현재 블록의 고인 빗물을 저장
                now += Math.min(left, right) - block[i];
            
            // 가장 높은 건물들은 다시 구해야 하므로 초기화한다.
            left = 0;   
            right = 0;
                
        }
      System.out.println(now);
      // 처음에는 stack을 써서 하려 했는데, 너무 예외가 많아서 문제가 발생...block마다 구하기로 변경하였다.
    }
}
