/*
안전 영역 성공출처
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초	128 MB	44411	16692	11190	34.281%
문제
재난방재청에서는 많은 비가 내리는 장마철에 대비해서 다음과 같은 일을 계획하고 있다. 먼저 어떤 지역의 높이 정보를 파악한다. 그 다음에 그 지역에 많은 비가 내렸을 때 물에 잠기지 않는 안전한 영역이 최대로 몇 개가 만들어 지는 지를 조사하려고 한다. 이때, 문제를 간단하게 하기 위하여, 장마철에 내리는 비의 양에 따라 일정한 높이 이하의 모든 지점은 물에 잠긴다고 가정한다.

어떤 지역의 높이 정보는 행과 열의 크기가 각각 N인 2차원 배열 형태로 주어지며 배열의 각 원소는 해당 지점의 높이를 표시하는 자연수이다. 예를 들어, 다음은 N=5인 지역의 높이 정보이다.

6	8	2	6	2
3	2	3	4	6
6	7	3	3	2
7	2	5	3	6
8	9	5	2	7
이제 위와 같은 지역에 많은 비가 내려서 높이가 4 이하인 모든 지점이 물에 잠겼다고 하자. 이 경우에 물에 잠기는 지점을 회색으로 표시하면 다음과 같다. 

6	8	2	6	2
3	2	3	4	6
6	7	3	3	2
7	2	5	3	6
8	9	5	2	7
물에 잠기지 않는 안전한 영역이라 함은 물에 잠기지 않는 지점들이 위, 아래, 오른쪽 혹은 왼쪽으로 인접해 있으며 그 크기가 최대인 영역을 말한다. 위의 경우에서 물에 잠기지 않는 안전한 영역은 5개가 된다(꼭짓점으로만 붙어 있는 두 지점은 인접하지 않는다고 취급한다). 

또한 위와 같은 지역에서 높이가 6이하인 지점을 모두 잠기게 만드는 많은 비가 내리면 물에 잠기지 않는 안전한 영역은 아래 그림에서와 같이 네 개가 됨을 확인할 수 있다. 

6	8	2	6	2
3	2	3	4	6
6	7	3	3	2
7	2	5	3	6
8	9	5	2	7
이와 같이 장마철에 내리는 비의 양에 따라서 물에 잠기지 않는 안전한 영역의 개수는 다르게 된다. 위의 예와 같은 지역에서 내리는 비의 양에 따른 모든 경우를 다 조사해 보면 물에 잠기지 않는 안전한 영역의 개수 중에서 최대인 경우는 5임을 알 수 있다. 

어떤 지역의 높이 정보가 주어졌을 때, 장마철에 물에 잠기지 않는 안전한 영역의 최대 개수를 계산하는 프로그램을 작성하시오. 

입력
첫째 줄에는 어떤 지역을 나타내는 2차원 배열의 행과 열의 개수를 나타내는 수 N이 입력된다. N은 2 이상 100 이하의 정수이다. 둘째 줄부터 N개의 각 줄에는 2차원 배열의 첫 번째 행부터 N번째 행까지 순서대로 한 행씩 높이 정보가 입력된다. 각 줄에는 각 행의 첫 번째 열부터 N번째 열까지 N개의 높이 정보를 나타내는 자연수가 빈 칸을 사이에 두고 입력된다. 높이는 1이상 100 이하의 정수이다.

출력
첫째 줄에 장마철에 물에 잠기지 않는 안전한 영역의 최대 개수를 출력한다.

예제 입력 1 
5
6 8 2 6 2
3 2 3 4 6
6 7 3 3 2
7 2 5 3 6
8 9 5 2 7
예제 출력 1 
5
예제 입력 2 
7
9 9 9 9 9 9 9
9 2 1 2 1 2 9
9 1 8 7 8 1 9
9 2 7 9 7 2 9
9 1 8 7 8 1 9
9 2 1 2 1 2 9
9 9 9 9 9 9 9
예제 출력 2 
6
*/

// 풀이
import java.util.*;

public class Main {
    public static int Xmove[] = {-1, 1, 0, 0};
    public static int Ymove[] = {0, 0, -1, 1}; // 상 하 좌 우 를  움직이며 체크할 Xmove, Ymove
    public static int n;  // 입력받을 섬의 크기 n
    public static int ans = 1;  // 비가 안오는 경우 안전영역의 크기는 1 <- 최소 안전영역은 1개이다.
    public static int map[][];    // 지도
    public static boolean check[][];  // 체크용
    public static int nowRain = 1;    // 이번에 내릴 비의 양 nowRain은 최소 1부터 시작한다.
     
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int maxRain = 1;    // 최대 비는 여기까지 올것이다. 최대 비의 양은 지도상 가장 큰 숫자로 정함.
        
        n = sc.nextInt();
        map = new int[n][n];
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                int input = sc.nextInt();   // 입력값중 가장 큰 값으로 maxRain 세트
                maxRain = Math.max(maxRain, input);
                map[i][j] = input;
            }
        }
        
        for(int k=1; k<=maxRain; k++){  // 비가 1만 오는 경우 ~ 최대 높이까지 오는 경우
            check = new boolean[n][n];    // 매번 체크를 다시 해줘야 해서 이 안에서 check를 초기화했다.
            int nowSafe = 0;              // 안전 영역의 개수(넓이 아니고 개수다.)
            nowRain = k;                  // 지금 오는 비의 양은 k이다.
            for(int i=0; i<n; i++){       // 지도 크기만큼 확인
                for(int j=0; j<n; j++){
                    if(!check[i][j] && map[i][j] > nowRain ){   // 침수되지 않았고, 다른 안전영역과 연결되지 않았으면
                        nowSafe++;      // 새로운 안전 영역이다.
                        dfs(i, j);      // 여기랑 연결된 안전 영역들을 확인하기 위한 dfs
                    }
                }
            }
            ans = Math.max(ans, nowSafe);   // 안전 영역의 개수중 가장 큰걸 return하면 된다.
        }
        System.out.println(ans);
            
    }
    public static void dfs(int x, int y){
        if(x<0 || x>=n || y<0 || y>=n) return;    // 지도 밖으로 나가면 바로 return
        if(check[x][y] || map[x][y]<=nowRain) return;   // 이미 와본 장소이거나 침수된 지역이면 return
        check[x][y] = true;     // 위에서 안걸러졌으므로 지도 안에 있는 처음 방문하는 곳이니까 체크해준다.
        
        for(int i=0; i<4; i++){
            dfs(x+Xmove[i], y+Ymove[i]);    // 지금 안전 영역에서 갈 수 있는 모든 안전 영역 체크
        }
    }
}
