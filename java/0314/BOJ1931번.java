/*
회의실 배정 분류
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	128 MB	71903	21027	15303	28.666%
문제
한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자. 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.

입력
첫째 줄에 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다. 시작 시간과 끝나는 시간은 231-1보다 작거나 같은 자연수 또는 0이다.

출력
첫째 줄에 최대 사용할 수 있는 회의의 최대 개수를 출력한다.

예제 입력 1 
11
1 4
3 5
0 6
5 7
3 8
5 9
6 10
8 11
8 12
2 13
12 14
예제 출력 1 
4
*/

// 풀이
import java.util.*;
public class Main {

	public static void main(String[] args) {
		// -----입력-------
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int time[][] = new int[N][2];
		for(int i=0; i<N; i++)
		{
			time[i][0] = sc.nextInt();
			time[i][1] = sc.nextInt();
		}
    // -----------------
    
    // 끝나는 시간 기준으로 오름차순 정렬해서, 끝나는 시간이 적은 순으로 이전 회의가 끝났을 때 이후 회의가 그 다음에 시작하게 하면 된다. 
    // 즉 끝나는 시간이 작을수록 많은 회의를 넣을 수 있기에 그에 맞추어 시작시간만 바로 뒤에 위치하면 될 것이다.
    // 다만 같은 시간에 끝나는 경우, 시작하자마자 회의가 끝나는 경우 등이 있기 떄문에 1)끝나는 시간 기준 -> 2)시작시간 기준 이렇게, 같은 시간에 끝날 때 시작시간 기준 정렬을 추가해 주어야 한다.
		Arrays.sort(time, Comparator.comparingInt(o1 -> o1[0]));
		Arrays.sort(time, Comparator.comparingInt(o1 -> o1[1]));
				
    // 맨 처음에 위치하는 회의의 끝 시간을 적는다. 회의가 하나 존재하므로 ans는 1로 시작
		int endtime = time[0][1];
		int ans = 1;
		
		for(int cnt=1; cnt<N; cnt++)
		{
      // 회의 끝 시간이 다음 회의 시작시간보다 작거나 같은 경우 바꾸어 주고 그 회의를 갯수에 쳐 준다.
			if(endtime <= time[cnt][0])
			{
				endtime = time[cnt][1];
				ans++;
			}
			
		}
		
		System.out.println(ans);
	}

}

