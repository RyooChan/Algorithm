/*
기능개발
문제 설명
프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

제한 사항
작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
작업 진도는 100 미만의 자연수입니다.
작업 속도는 100 이하의 자연수입니다.
배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.
입출력 예
progresses	speeds	return
[93, 30, 55]	[1, 30, 5]	[2, 1]
[95, 90, 99, 99, 80, 99]	[1, 1, 1, 1, 1, 1]	[1, 3, 2]
입출력 예 설명
입출력 예 #1
첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.

따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

입출력 예 #2
모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 20일, 1일입니다. 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.

따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.

※ 공지 - 2020년 7월 14일 테스트케이스가 추가되었습니다.
*/

// 풀이
function solution(progresses, speeds) 
{
    var answer = [];
    // process에는 queue형식으로 진행되는 1번~마지막 작업까지의 걸린 시간이 저장된다.
    var process = [];
    // save는 answer에 저장될 실제 정답, 즉 같은 날짜에 배포되는 작업의 정보를 파악하기 위해 사용한다.
    var save = 1;
    
    
    for(var i=0; i<progresses.length; i++)
    {
        // 각각의 작업시간을 구하기 위한 변수 spenttime을 선언한다.
        var spenttime = 0;
        
        // progress는 100이상이 되면 종료된다.
        while(progresses[i] < 100)
        {
            // 작업 시간에 작업 속도를 더해주고, spenttime은 한번 진행될 때 마다 하루가 더해진다.
            progresses[i] += speeds[i];
            spenttime++;
        }
        // 1 : 첫날의 경우 시간이 그대로 저장된다.
        if(!i)
            process[i] = spenttime;
        // 2 : 다음날부터는 걸린 시간이 전날보다 적은 경우 이전날짜의 작업시간을 그대로 저장한다.
        else if(process[i-1] > spenttime)
            process[i] = process[i-1];
        // 3 : 더 오랜 시간이 걸린 경우 이 시간을 저장시킨다.
        else
            process[i] = spenttime;
    }
    
    // 위에서 save를 1로 선언한 이유는 배포 작업의 갯수를 나타내기 때문에 최소 1개가 배포될 때 마다 적어주기 때문이다.
    // 맨 처음 배포되는 작업의 경우 어차피 save에 미리 포함되어 고려할 필요가 없다.
    for(var i=1; i<process.length; i++){
        // 이전 날짜와 당일 날짜의 작업시간이 같은 경우, 두 작업은 동시에 배포된다.
        if(process[i-1]==process[i])
            save++;
        // 작업시간이 다른 경우, 배포되는 작업을 answer에 저장시키고 다음 작업을 판단한다.
        else{
            answer.push(save);
            save = 1;
        }   
    }
    // 마지막 작업의 경우, 알고리즘이 해결되지 않고 for문을 탈출하기 때문에 추가로 더해준다.
    answer.push(save);
    
       
    return answer;
}
