/*
문제 설명
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.
입출력 예
array	commands	return
[1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]
입출력 예 설명
[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.
[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.
[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.
*/

// 풀이
function solution(array, commands) {
    var answer = [];
    
    // 테스트 케이스의 개수만큼 코드 수행
    for(var j=0; j<commands.length; j++){
        // 범위를 나누어 정렬하기 위한 data배열을 매 case에 맞추어 초기화하며 선언한다.
        var data = [];
        // 배열의 시작은 0, commands의 시작은 1이기 때문에 이를 맞추어 준다.
        for(var i=commands[j][0]-1; i<=commands[j][1]-1; i++){
            // array의 각각의 값들을 data에 넣어준다.
            data.push(array[i]);
        }
        
        // data를 낮은 수부터 정렬한다. 본래 data.sort()를 사용하였으나 문제가 발생하여 찾아보았더니 sort((a,b)=> a-b)의 식으로 인수를 적어야 한다고 하여 이로 변경하였다.
        data.sort((a,b)=> a-b);
        
        // 해당하는 정답을 answer에 기입한다.
        answer.push(data[commands[j][2]-1]);
    }
    return answer;
}
